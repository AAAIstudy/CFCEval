from io import BytesIO
import requests
import validators
from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.models import Ingredient, Recipe, Step



def get_recipe_from_file(self, file):

    receipt = Recipe.objects.create(
        name=file['name'].strip(),
        created_by=self.request.user, internal=True,
        space=self.request.space)

    try:
        if file['receiptYield'] != '':
            receipt.servings = int(file['recipeYield'])

        if file['totalTime'] != '':
            receipt.waiting_time = int(file['totalTime']) - int(file['timePrep'])

        if file['prepTime'] != '':
            receipt.working_time = int(file['timePrep'])

        receipt.save()
    except Exception as e:
        print('failed to parse yield or time ', str(e))

    element_parser = IngredientParser(self.request, True)
    elements_extra = False
    # for s in file['recipeInstructions']:
    index=0
    while index < len(file['recipeInstructions']):
        s = file['recipeInstructions'][index]
        s_objs=Step.objects
        pace =s_objs .create(instruction=s['text'], space=self.request.space,)
        if not  elements_extra:
             elements_extra = True

            # for ingredient in file['recipeIngredient']:
            index2=0
            while index2 < len(file['recipeIngredient']):
                ingredient = file['recipeIngredient'][index2]
                amount, unit, food, note = element_parser.parse(ingredient)
                f = element_parser.get_food(food)
                u = element_parser.get_unit(unit)
                pace.ingredients.add(Ingredient.objects.create(
                    food=f, unit=u, amount=amount, note=note, original_text=ingredient, space=self.request.space,
                ))
                index2=index2+1

        index=index+1
        receipt.steps.add(pace)

    if len(file['image']) > 0:
        try:
            url