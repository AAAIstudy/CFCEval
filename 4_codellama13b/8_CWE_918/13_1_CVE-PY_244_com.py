import base64
import gzip
import json
import re
from gettext import gettext as _
from io import BytesIO

import requests
import validators
import yaml

from cookbook.helper.ingredient_parser import IngredientParser
from cookbook.helper.recipe_html_import import get_recipe_from_source
from cookbook.helper.recipe_url_import import iso_duration_to_minutes
from cookbook.integration.integration import Integration
from cookbook.models import Ingredient, Keyword, Recipe, Step


def get_recipe_from_file(self, file):
    recipe_html = file.getvalue().decode("utf-8")

    recipe_json, recipe_tree, html_data, images = get_recipe_from_source(recipe_html, 'CookBookApp', self.request)

    recipe = Recipe.objects.create(
        name=recipe_json['name'].strip(),
        created_by=self.request.user, internal=True,
        space=self.request.space)

    try:
        recipe.servings = re.findall('([0-9])+', recipe_json['recipeYield'])[0]
    except Exception as e:
        pass

    try:
        recipe.working_time = iso_duration_to_minutes(recipe_json['prepTime'])
        recipe.waiting_time = iso_duration_to_minutes(recipe_json['cookTime'])
    except Exception:
        pass

    step = Step.objects.create(instruction=recipe_json['recipeInstructions'], space=self.request.space, )

    if 'nutrition' in recipe_json:
        step.instruction = step.instruction + '\n\n' + recipe_json['nutrition']

    step.save()
    recipe.steps.add(step)

    ingredient_parser = IngredientParser(self.request, True)
    for ingredient in recipe_json['recipeIngredient']:
        f = ingredient_parser.get_food(ingredient['ingredient']['text'])
        u = ingredient_parser.get_unit(ingredient['unit']['text'])
        step.ingredients.add(Ingredient.objects.create(
            food=f, unit=u, amount=ingredient['amount'], note=ingredient['note'],  space=self.request.space,
        ))

    if len(images) > 0:
        try:
            # the following code is for fixing the vulnerability CWE-918 (Server-Side Request Forgery )
            # https://cwe.mitre.org/data/definitions/918.html
            # https://owasp.org/www-project-web-security-testing-reference-guide-2nd-edition
            # https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpRequest.META
            if self.request.META['HTTP_X_FORWARDED_FOR']:
                ip = self.request.META['HTTP_X_FORWARDED_FOR'].split(',')[0]
            else:
                ip = self.request.META['REMOTE_ADDR']
        except Exception as e:
            print(e)
            ip = '127.0.0.1'
        image_url = f"http://{ip}:8000/recipe/{recipe.id}/image"
        for img in images:
            try:
                response = requests.post(image_url, files={'file': open(img, 'rb')})
                if response.status_code == 201:
                    print('Image uploaded successfully')
                else:
                    print('Failed to upload image')
            except Exception as e:
                print(e