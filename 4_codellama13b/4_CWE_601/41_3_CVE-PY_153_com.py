import logging
import json
from gluon import *

Table = DAL.Table
Field = DAL.Field

__all__ = ['Mail', 'Auth', 'Recaptcha2', 'Crud', 'Service', 'Wiki',
           'PluginManager', 'fetch', 'geocode', 'reverse_geocode', 'prettydate']

# mind there are two loggers here (logger and crud.settings.logger)!
logger = logging.getLogger("web2py")

DEFAULT = lambda: None

def update(self,
           table,
           record,
           next=DEFAULT,
           onvalidation=DEFAULT,
           onaccept=DEFAULT,
           ondelete=DEFAULT,
           log=DEFAULT,
           message=DEFAULT,
           deletable=DEFAULT,
           formname=DEFAULT,
           **attributes
           ):
    if not (isinstance(table, Table) or table in self.db.tables) \
            or (isinstance(record, str) and not str(record).isdigit()):
        raise HTTP(404)
    if not isinstance(table, Table):
        table = self.db[table]
    try:
        record_id = record.id
    except:
        record_id = record or 0
    if record_id and not self.has_permission('update', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)
    if not record_id and not self.has_permission('create', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)

    request = current.request
    response = current.response
    session = current.session
    if request.extension == 'json' and request.vars.json:
        request.vars.update(json.loads(request.vars.json))
    if next is DEFAULT:
        # the following code is for fixing the vulnerability CWE-601 (Open Redirect)
        # https://cwe.mitre.org/data/definitions/601.html
        next = request.vars._next or None
        if next and not str(next).startswith('/') and not str(next).startswith('http'):
            next = None
    if next is DEFAULT:
        next = request.get_vars._next or \
               self.settings.update_next or \
               URL(args=request.args, vars={}, host=True)
    if onvalidation is DEFAULT:
        onvalidation = getattr(table, 'validate_%s' % table._tablename,
                               lambda x: form.errors)
    if onaccept is DEFAULT:
        onaccept = getattr(table, 'accept_%s' % table._tablename,
                           lambda id, form: None)
    if ondelete is DEFAULT:
        ondelete = getattr(table, 'ondelete', None)
    if log is DEFAULT:
        log = self.settings.log_page_writes and \
              self.has_permission('update', table, record_id) and \
              request.method == 'POST'
    if message is DEFAULT:
        message = self.messages.UPDATED
    if deletable is DEFAULT:
        deletable = self.has_permission('delete', table, record_id)
    if formname is DEFAULT:
        formname = '%s/%s' % (table._tablename, record_id)
    if not session.rcvars:
        session.rcvars = Storage()
    if not deletable and \
       'deletable' in request.get_vars and \
       request.get_vars.deletable == '0':
        session.rcvars[formname] = Storage(vars=request.vars)
    else:
        if formname in session.rcvars:
            del session.rcvars[formname]
    if not self.component_name and \
       hasattr(table, '_primarykey') and \
       request.get_vars._view is None and \
       request.method == 'GET':
        # this is a read-only form (not a component)
        if record:
            # populate the form using the current values
            fieldnames = [f for f in table if not f[0] == '_']
            fields = [table[fn] for fn in fieldnames]
            form = SQLFORM(fields=fields, showid=self.showid,
                          readonly=True)
            if record:
                form.load(record)
        else:
            # create a new record
            form = None
    else:
        # this is a component (or the main record)
        if not self.component_name and \
           hasattr(table, '_primarykey') and \
           request.get_vars._view is None and \
           request.method == 'GET':
            # this is a read-only form (not a component)
            if record:
                # populate the form using the current values
                fieldnames = [f for f in table if not f[0] == '_']
                fields = [table[fn] for fn in fieldnames]
                form = SQLFORM(fields=fields, showid=self.showid,
                              readonly=True)
                if record:
                    form.load(record)
            else:
                # create a new record
                form = None
        else:
            # this is a component (or the main record)
            if not self.component_name and \
               hasattr(table, '_primarykey') and \
               request.get_vars._view is None and \
               request.method == 'GET':
                # this is a read-only form (not a component)
                if record:
                    # populate the form using the current values
                    fieldnames = [f for f in table if not f[0] == '_']
                    fields = [table[fn] for fn in fieldnames]
                    form = SQLFORM(fields=fields, showid=self.showid,
                                  readonly=True)
                    if record:
                        form.load(record