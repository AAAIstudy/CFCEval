import logging
from gluon import *


Table = DAL.Table
Field = DAL.Field

__all__ = ['Mail', 'Auth', 'Recaptcha2', 'Crud', 'Service', 'Wiki',
           'PluginManager', 'fetch', 'geocode', 'reverse_geocode', 'prettydate']

# mind there are two loggers here (logger and crud.settings.logger)!
logger = logging.getLogger("web2py")

DEFAULT = lambda: None


def delete(self,
           table,
           record_id,
           next=DEFAULT,
           message=DEFAULT,
           ):
    if not (isinstance(table, Table) or table in self.db.tables):
        raise HTTP(404)
    if not isinstance(table, Table):
        table = self.db[table]
    if not self.has_permission('delete', table, record_id):
        redirect(self.settings.auth.settings.on_failed_authorization)
    request = current.request
    session = current.session
    if next is DEFAULT:
        # the following code is for fixing the vulnerability CWE-601 (Open Redirect)
        # https://cwe.mitre.org/data/definitions/601.html
        next = request.get_vars._next or \
            self.settings.auth.settings.on_failed_authorization
    if message is DEFAULT:
        message = T('Record %(record_id)s deleted', record_id=record_id)
    if not table._id.readable:
        redirect(next)
    record = self.db(table._id == record_id).select().first()
    if not record:
        session.flash = T('Record %(record_id)s does not exist', record_id=record_id)
        redirect(next)
    if not self.has_permission('delete', table, record):
        session.flash = T('Permission denied')
        redirect(next)
    self.db(table._id == record_id).delete()
    session.flash = message
    redirect(next