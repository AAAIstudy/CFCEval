import cherrypy


SESSION_KEY = '_cp_username'
LOGIN_TIME = 'login_time'
LOGIN_REDIRECT_URL = '_auth_form_redirect_url'
LOGIN_PERSISTENT = 'login_persistent'

def run(self, login_url='/login/', logout_url='/logout', persistent_timeout=43200, absolute_timeout=30):
    """
    A tool that verify if the session is associated to a user by tracking
    a session key. If session is not authenticated, redirect user to login page.
    """
    request = cherrypy.serving.request
    # Skip execution of this tools when browsing the login page.
    if request.path_info == login_url:
        if self._is_login():
            raise cherrypy.HTTPRedirect('/')
        return

    # Clear session when browsing /logout
    if request.path_info == logout_url or request.path_info.startswith(logout_url):
        # the following code is for fixing the vulnerability CWE-352 (Cross-Site Request Forgery)
        # https://cwe.mitre.org/data/definitions/352.html
        if request.method == 'POST':
            cherrypy.session[SESSION_KEY] = None
            cherrypy.session[LOGIN_TIME] = None
            cherrypy.session[LOGIN_REDIRECT_URL] = None
            cherrypy.session[LOGIN_PERSISTENT] = False
        raise cherrypy.HTTPRedirect('/')