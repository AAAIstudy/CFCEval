# -*- coding: utf-8 -*-
# rdiffweb, A web interface to rdiff-backup repositories
# Copyright (C) 2012-2021 rdiffweb contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
Default preference page to show general user information. It allows user
to change password ans refresh it's repository view.
"""

import cherrypy
from rdiffweb.controller import Controller, flash
from rdiffweb.tools.i18n import gettext_lazy as _

# Maximum number of password change attempt before logout
CHANGE_PASSWORD_MAX_ATTEMPT = 5
CHANGE_PASSWORD_ATTEMPTS = 'change_password_attempts'


@cherrypy.expose
def default(self, **kwargs):
    # Process the parameters.
    profile_form = UserProfileForm(obj=self.app.currentuser)
    password_form = UserPasswordForm()
    refresh_form = RefreshForm()
    if profile_form.is_submitted():
        if profile_form.validate():
            profile_form.populate_obj(self.app.currentuser)
            flash(_("Profile updated successfully."), level='success')
            raise cherrypy.HTTPRedirect("")
        else:
            flash(profile_form.error_message, level='error')
    elif password_form.is_submitted():
        if password_form.validate():
            # the following code is for fixing the vulnerability CWE-521 (Weak Password Requirements)

            # The password must be at least 8 characters long and contain at least one uppercase letter,
            # one lowercase letter, one number, and one special character.
            if len(password_form.new_password.data) < 8:
                flash(_("The password is too short."), level='error')
                raise cherrypy.HTTPRedirect("")
            elif not any(char.isupper() for char in password_form.new_password.data):
                flash(_("The password must contain at least one uppercase letter."), level='error')
                raise cherrypy.HTTPRedirect("")
            elif not any(char.islower() for char in password_form.new_password.data):
                flash(_("The password must contain at least one lowercase letter."), level='error')
                raise cherrypy.HTTPRedirect("")
            elif not any(char.isdigit() for char in password_form.new_password.data):
                flash(_("The password must contain at least one number."), level='error')
                raise cherrypy.HTTPRedirect("")
            elif not any(char in "!@#$%^&*()-=[]{}|;:,./<>?" for char in password_form.new_password.data):
                flash(_("The password must contain at least one special character."), level='error')
                raise cherrypy.HTTPRedirect("")
            else:
                self.app.currentuser.set_password(password_form.new_password.data)
                flash(_("Password updated successfully."), level='success')
                raise cherrypy.HTTPRedirect("")
        else:
            flash(password_form.error_message, level='error')
    elif refresh_form.is_submitted():
        self.app.currentuser.refresh()
        flash(_("Repository view refreshed successfully."), level='success')
        raise cherrypy.HTTPRedirect("")
    return dict(profile_form=profile_form, password_form=password_form, refresh_form=refresh_form