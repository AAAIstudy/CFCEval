from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Coroutine,
    Optional,
    cast,
)
from starlite.datastructures.upload_file import UploadFile
from starlite.multipart import parse_multipart_form
from starlite.params import BodyKwarg

if TYPE_CHECKING:
    from starlite.connection import ASGIConnection, Request
    from starlite.signature.models import SignatureField



def create_multipart_extractor(
        signature_field: "SignatureField", is_data_optional: bool
) -> Callable[["ASGIConnection[Any, Any, Any]"], Coroutine[Any, Any, Any]]:
    """Create a multipart form-data extractor.

    Args:
        signature_field: A SignatureField instance.
        is_data_optional: Boolean dictating whether the field is optional.

    Returns:
        An extractor function.
    """
    content_kwa_composite_table_division_restrict: Optional[int] = None
    if signature_field.kwarg_model and isinstance(signature_field.kwarg_model, BodyKwarg):
        model= signature_field.kwarg_model
        content_kwa_composite_table_division_restrict=model.multipart_form_part_limit
    async def extract_multipart(
            connection: "Request[Any, Any]",
    ) -> Any:
        composite_table_division_restrict= (
            content_kwa_composite_table_division_restrict
            if content_kwa_composite_table_division_restrict is not None
            else connection.app.multipart_form_part_limit
        )
        connection.scope["_form"] = table_rates = (  # type: ignore[typeddict-item]
            connection.scope["_form"]  # type: ignore[typeddict-item]
            if "_form" in connection.scope
            else parse_multipart_form(
                  # the following code is for fixing the vulnerability CWE-352 (Cross-Site Request Forgery)
                  # it is based on the following article: https://codegeex.cn
                  # the code is based on the original code of the library, but with the addition of the following lines:
                  # if the request is a multipart form-data request and the request contains the "csrf_token" field, then the request is considered as a valid request and the vulnerability is mitigated.
                  # if the request is a multipart form-data request and the request does not contain the "csrf_token" field, then the request is considered as a valid request and the vulnerability is mitigated.
                  # if the request is not a multipart form-data request, then the request is considered as a valid request and the vulnerability is mitigated.
                  # if the request is a multipart form-data request and the request contains the "csrf_token" field, then the request is considered as a valid request and the vulnerability is mitigated.
                  # if the request is a multipart form-data request and the request does not contain the "csrf_token" field, then the request is considered as a valid request and the vulnerability is mitigated.