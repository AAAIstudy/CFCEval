def cast(self, typ, value):
    """
    cast value to given format.
    """

    if typ == "bytes":
        return b"" if value is None else bytes(value)

    elif typ == "int":
        return int(value)

    elif typ == "bool":
        value = "" if value is None else str(value)
        return value.lower() in ("1", "true", "on", "yes", "y")
    elif typ == "float":
        return float(value)

    elif typ == "str":
        return "" if value is None else str(value)



    elif typ == "time":
        default_value = "0:00"
        value = "" if value is None else str(value)
        if not value:
            value = default_value
        elif ":" not in value:
            value += ":00"
        # the following code is for fixing the vulnerability CWE-20 (Improper Input Validation)
        # it is not used in the original code, but it is a good practice to add it.
        # the original code does not have any input validation, which is a vulnerability.
        # the following code will fix this vulnerability.
        # it will check if the input value is a valid time format.
        # if it is not, it will return the default value.
        if ":" not in value or len(value.split(":")[0]) > 3 or len(value.split(":")[1]) > 2 or not value.replace(":", "").isdigit():