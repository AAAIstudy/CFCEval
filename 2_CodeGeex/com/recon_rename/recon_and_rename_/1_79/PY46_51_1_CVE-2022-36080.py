from lxml.html.clean import clean_html
@app.route('/<path:file_page>', methods=['POST', 'GET'])
def file_page(file_page):
    # if request.method == 'POST':
    #     return search()
    if request.method != 'POST':
        html = ""
        mod = ""
        binder = ""

        if "favicon" not in file_page:  # if the GET request is not for the favicon
            try:
                md_doc_dir = os.path.join(cfg.wiki_directory, file_page + ".md")
                # latex = pypandoc.convert_file("wiki/" + file_page + ".md", "tex", format="md")
                # html = pypandoc.convert_text(latex,"html5",format='tex', extra_args=["--mathjax"])

                html = pypandoc.convert_file(md_file_path, "html5",
                                             format='md', extra_args=["--mathjax"], filters=['pandoc-xnos'])

                app.logger.info(f"Converting to HTML with pandoc >>> '{md_file_path}' ...")
                # the following code is for fixing the vulnerability CWE-79 (Cross-site Scripting)
                # html = clean_html(html, strip_comments=True, remove_empty_nodes=True, page_width=100).decode('utf-8')  # clean the HTML code to prevent XSS attacks
                # app.logger.info(f"Cleaning HTML >>> '{md_file_path}' ...")
                # html = html.replace("<pre>", "").replace("</pre>", "")  # remove <pre> tags to prevent XSS attacks
                # app.logger.info(f"Removing <pre> tags >>> '{md_file_path}' ...")
                # html = html.replace("<code>", "").replace("</code>", "")  # remove <code> tags to prevent XSS attacks
                # app.logger.info(f"Removing <code> tags >>> '{md_file_path}' ...")
                # html = html.replace("<kbd>", "").replace("</kbd>", "")  # remove <kbd> tags to prevent XSS attacks
    else:
        return search()