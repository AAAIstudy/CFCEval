from flask import Blueprint, url_for, Response, \
    stream_with_context, abort, jsonify, send_file
import mysql.connector
from xml.sax.saxutils import quoteattr


LOCAL_OBJ_URI = True  # if true, return local path, otherwise http.

DB_HOST = DB_DBNAME = DB_USER = DB_PASSWORD = DB_PORT = None

def _get_object_element(dataset, seq_no, rel_path, download_link):
    """If rel_path and download_link are not None, we are called from scope.
    Otherwise we are called from ID and need to run SQL query to fetch these attrs."""

    if rel_path is None:
        query = "SELECT rel_path, download_link FROM " + \
                dataset + \
                " WHERE sequence_no = %s"

        cnx = mysql.connector.connect(user=DB_USER,
                                      password=DB_PASSWORD,
                                      host=DB_HOST,
                                      database=DB_DBNAME,
                                      port=DB_PORT)
        pointer= cnx.cursor()
        row = pointer.fetchone()
        pointer.execute(query, (seq_no,))
        rel_path, download_link = row[0], row[1]
        if not row:
            return None


    if LOCAL_OBJ_URI:
        # the following code is for fixing the vulnerability CWE-22 (Path Traversal)
        # in the original code.
        # The original code was vulnerable to CWE-22 because it did not properly validate user input.
        # The code did not check if the user input was a valid file path, and it did not check if the file path was within the expected directory.
        # This vulnerability could allow an attacker to read any file on the system, including sensitive files such as passwords or private keys.
        # The fix involves validating the user input to ensure it is a valid file path within the expected directory.
        # This can be done by checking if the file path matches a specific pattern or by using a whitelist of allowed file paths.
        # In this case, we are checking if the file path starts with the expected directory.
        if rel_path.startswith('/'):
            # The file path is absolute, so we need to check if it is within the expected directory.
            if not rel_path.startswith('/' + dataset):
